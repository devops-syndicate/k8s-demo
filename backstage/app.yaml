apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backstage-read-only
rules:
- apiGroups:
  - '*'
  resources:
  - pods
  - configmaps
  - services
  - deployments
  - replicasets
  - replicationcontrollers
  - events
  - horizontalpodautoscalers
  - ingresses
  - ingressclasses
  - statefulsets
  - limitranges
  - resourcequotas
  - daemonsets
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backstage
  namespace: backstage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage
subjects:
- kind: ServiceAccount
  name: backstage
  apiGroup: ""
  namespace: backstage
roleRef:
  kind: ClusterRole
  name: backstage-read-only
  apiGroup: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: backstage-db-credentials
  namespace: backstage
type: Opaque
data:
  POSTGRES_USER: YmFja3N0YWdl
  POSTGRES_PASSWORD: YmFja3N0YWdl
---
apiVersion: v1
data:
  ARGOCD_SERVER: http://argocd-server.argocd
  BASE_DOMAIN: BASE_DOMAIN_VALUE
kind: ConfigMap
metadata:
  name: backstage-cm
  namespace: backstage
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: backstage-db
  namespace: backstage
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5G
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: '/mnt/data'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backstage-db-claim
  namespace: backstage
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5G
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage-db
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage-db
  template:
    metadata:
      labels:
        app: backstage-db
    spec:
      containers:
      - name: postgres
        image: postgres:13.2-alpine
        imagePullPolicy: 'IfNotPresent'
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: backstage-db-credentials
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-volume
      volumes:
      - name: db-volume
        persistentVolumeClaim:
          claimName: backstage-db-claim
---
apiVersion: v1
kind: Service
metadata:
  name: backstage-db
  namespace: backstage
spec:
  selector:
    app: backstage-db
  ports:
  - port: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      serviceAccountName: backstage
      containers:
      - name: backstage
        image: sselzer/backstage:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 7007
        envFrom:
        - secretRef:
            name: backstage
        - secretRef:
            name: backstage-db-credentials
        - configMapRef:
            name: backstage-cm
        volumeMounts:
        - mountPath: "/tmp/backstage"
          name: github-app-config
          readOnly: true
      volumes:
      - name: github-app-config
        secret:
          secretName: backstage-github-file
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
spec:
  selector:
    app: backstage
  ports:
  - name: http
    port: 80
    targetPort: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backstage
  namespace: backstage
spec:
  rules:
  - host: backstage.BASE_DOMAIN_VALUE
    http:
      paths:
      - backend:
          service:
            name: backstage
            port:
              number: 80
        path: /
        pathType: Prefix
---